  generator client {
    provider = "prisma-client-js"
  }

  datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
  }


  model User {
    id            String    @id @default(cuid())
    name          String?
    email         String    @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]

    tipo                                TipoUsuario
    Devolutiva_Devolutiva_alunoIdToUser Devolutiva[]
    ProgressoVideo                      ProgressoVideo[]
    Avaliacoes                          Avaliacoes[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
  }

  model Account {
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?
    ext_expires_in    Int?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@id([provider, providerAccountId])
  }

  model Session {
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
  }

  model VerificationToken {
    identifier String
    token      String
    expires    DateTime

    @@id([identifier, token])
  }

  enum TipoUsuario {
    Aluno
    Avaliador
    Administrador
  }

  enum TipoDevolutiva {
    PDF
    PPTX
    VIDEO
  }

  enum StatusDevolutiva {
    Enviado
    Aprovado
    Rejeitado
  }

  model Modulo {
    id           String        @id @default(uuid())
    nome         String        @unique @db.VarChar(255)
    capacitacoes Capacitacao[]
    workshops    Workshop[]

    @@map("modulos")
  }

  model Capacitacao {
    id         String     @id @default(uuid())
    nome       String     @db.VarChar(255)
    link_video String?
    moduloId   String
    modulo     Modulo     @relation(fields: [moduloId], references: [id], onDelete: Cascade)
    workshops  Workshop[]

    @@map("capacitacoes")
  }

  model Workshop {
    id            String       @id @default(uuid())
    nome          String       @db.VarChar(255)
    moduloId      String?
    capacitacaoId String?
    modulo        Modulo?      @relation(fields: [moduloId], references: [id], onDelete: Cascade)
    capacitacao   Capacitacao? @relation(fields: [capacitacaoId], references: [id], onDelete: Cascade)
    devolutivas   Devolutiva[]

    @@map("workshops")
  }

  model Devolutiva {
    id            String           @id @default(uuid())
    workshopId    String
    alunoId       String
    tipo          TipoDevolutiva
    arquivo_url   String
    status        StatusDevolutiva @default(Enviado)
    duracao_video Int?
    workshop      Workshop         @relation(fields: [workshopId], references: [id], onDelete: Cascade)
    aluno         User             @relation(fields: [alunoId], references: [id], onDelete: Cascade)
    progressos    ProgressoVideo[]
    avaliacoes    Avaliacoes[]

    @@map("devolutivas")
  }

  model ProgressoVideo {
    id                 String     @id @default(uuid())
    devolutivaId       String
    usuarioId          String
    tempo_assistido    Int
    ultima_atualizacao DateTime   @default(now())
    devolutiva         Devolutiva @relation(fields: [devolutivaId], references: [id], onDelete: Cascade)
    usuario            User       @relation(fields: [usuarioId], references: [id], onDelete: Cascade)

    @@map("progresso_video")
  }

  model Avaliacoes {
    id           String     @id @default(uuid())
    devolutivaId String
    avaliadorId  String
    nota         Decimal    @db.Decimal(3, 1)
    comentario   String?
    devolutiva   Devolutiva @relation(fields: [devolutivaId], references: [id], onDelete: Cascade)
    avaliador    User       @relation(fields: [avaliadorId], references: [id], onDelete: Cascade)

    @@map("avaliacoes")
  }
